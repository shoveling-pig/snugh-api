openapi: 3.0.0
info:
  title: SNUGH_API
  version: '1.0'
  description: SNUGH Website 개발을 위한 API Docs입니다.
servers:
  - url: 'http://localhost:3000'
paths:
  /user/:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  id:
                    type: number
                  username:
                    type: string
                    minLength: 1
                  full_name:
                    type: string
                    minLength: 1
                  first_name:
                    type: string
                    minLength: 1
                  last_name:
                    type: string
                    minLength: 1
                  student_id:
                    type: string
                    minLength: 1
                  status:
                    type: number
                  major:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: integer
                  token:
                    type: string
                    minLength: 1
                required:
                  - id
                  - username
                  - full_name
                  - first_name
                  - last_name
                  - student_id
                  - status
                  - major
                  - token
              examples: {}
        '400':
          description: |-
            1. 모든 Required Body 항목을 채우지 않았을 때
            2. 이미 있는 유저일 때(student_id로 확인)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: Required fields missing
                example-2:
                  value:
                    error: existing user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                student_id:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                major_id:
                  type: array
                  items:
                    type: integer
                status:
                  type: integer
              required:
                - username
                - password
                - student_id
                - first_name
                - last_name
                - major_id
                - status
            examples: {}
          application/xml:
            schema:
              description: ''
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
                first_name:
                  type: string
                  minLength: 1
                last_name:
                  type: string
                  minLength: 1
                status:
                  type: number
                student_id:
                  type: string
                  minLength: 1
                major_id:
                  type: array
                  items:
                    type: integer
              required:
                - username
                - password
                - first_name
                - last_name
                - status
                - student_id
                - major_id
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    put:
      summary: ''
      operationId: put-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  full_name:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  student_id:
                    type: string
                  status:
                    type: integer
                  major:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: integer
        '401':
          description: Unauthorized
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                student_id:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                status:
                  type: integer
    parameters: []
    get:
      summary: ''
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  full_name:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  student_id:
                    type: string
                  status:
                    type: integer
                  major:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: integer
        '401':
          description: Unauthorized
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
    delete:
      summary: ''
      operationId: delete-user
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
  /requirement/:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1: {}
            application/xml:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      operationId: get-requirement
      description: 'plan_id에 해당하는 Plan의 졸업요건을 모두 조회합니다. Query Params의 type 값이 all이면 나와 관계된 모든 졸업요건을, credit이면 학점 관련 졸업요건만을, etc이면 학점 기타 졸업요건만을 반환합니다.'
      parameters:
        - schema:
            type: integer
          in: query
          name: plan_id
          required: true
          description: 졸업요건을 조회하고 싶은 Plan의 ID
        - schema:
            type: string
            enum:
              - all
              - credit
              - etc
          in: query
          name: type
          required: true
          description: 조회하고 싶은 졸업요건의 종류
    put:
      summary: ''
      operationId: put-requirement
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      description: plan_id에 해당하는 Plan에서 기타 졸업요건의 충족 여부를 User가 직접 체크하거나 체크 해제할 때 사용합니다. body의 is_fulfilled 값에 따라 체크 여부가 변경됩니다. requirement_id에 해당하는 졸업요건이 기타 졸업요건이 아닌 학점 관련 졸업요건일 시에는 에러 코드가 반환됩니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              description: ''
              type: object
              properties:
                idiot:
                  type: array
                  items:
                    required: []
                    properties: {}
              required:
                - idiot
        description: ''
    parameters: []
  /requirement/progress/:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-requirement-progress
      description: |-
        기준학점 대비 이수학점 비율을 나타내는 원형 프로그레스바 표시에 사용합니다. 전체/전필/전선/교양별 각각

        1. 기준학점 양
        2. 이수학점 양
        3. 1과 2의 비율

        을 모두 반환합니다.
      parameters:
        - schema:
            type: integer
          in: query
          name: plan_id
          description: 진행사항을 조회하고 싶은 Plan의 ID
          required: true
    parameters: []
  /user/login/:
    put:
      summary: login
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  full_name:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  student_id:
                    type: string
                  status:
                    type: integer
                  major:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: integer
                  token:
                    type: string
              examples:
                example-1:
                  value:
                    id: 0
                    username: string
                    full_name: string
                    first_name: string
                    last_name: string
                    student_id: string
                    status: 0
                    major:
                      id: 0
                      name: string
                      type: 0
                    token: string
        '400':
          description: |-
            Bad Request
            1. body에 username이 없을 때
            2. body에 password가 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: username missing
                example-2:
                  value:
                    error: password missing
        '403':
          description: 'username에 해당하는 유저가 없거나 username은 맞지만, 비밀번호가 틀렸을 때'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: Wrong username or wrong password
      operationId: put-user-login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
            examples:
              example-1:
                value:
                  username: string
                  password: string
    parameters: []
  /user/logout/:
    get:
      summary: log out
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-user-logout
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Token Authentification
          required: true
  /user/major/:
    get:
      summary: get all majors or search using keywords
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  major:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: integer
      operationId: get-user-major
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
        - schema:
            type: string
          in: query
          name: name
          description: 포함하는 major_name 검색
          required: true
    delete:
      summary: delete usermajor
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  major:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: integer
        '400':
          description: |-
            1. parameter에 major_id가 없을 때
            2. major_id에 해당하는 major을 현재 유저가 듣고 있지 않을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: major_id missing
                example-2:
                  value:
                    error: wrong major_id
        '401':
          description: No Token
        '404':
          description: parameter에 major_id가 있지만 해당하는 Major을 찾을 수 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: No major with the given major_id
      operationId: delete-user-major
      description: ''
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
        - schema:
            type: integer
          in: query
          name: major_id
          required: true
          description: 삭제할 major의 id
    post:
      summary: post usermajor
      tags: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  major:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: integer
        '400':
          description: params에 major_id가 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: major_id missing
        '401':
          description: 'Token이 주어지지 않았을 때 '
        '404':
          description: body에 major_id가 있지만 해당하는 Major을 찾을 수 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: No major with the given major_id
      operationId: post-user-major
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
        - schema:
            type: integer
          in: query
          name: major_id
          description: 추가할 major의 id
          required: true
      description: '현재 세션의 유저에 전공을 추가합니다. '
    parameters: []
  /plan/major/:
    post:
      summary: planmajor post
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        major:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              name:
                                type: string
                              type:
                                type: integer
        '400':
          description: |-
            1. query_params에 major_id가 없을 때
            2. query_params에 plan_id가 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                'example-1 ':
                  value:
                    error: major_id missing
                example-2:
                  value:
                    error: plan_id missing
        '401':
          description: No token
        '404':
          description: ' body에 major_id와 plan_id가 있지만 해당하는 Major을 찾을 수 없을 때'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: No major matching the given major_id and plan_id
      operationId: post-plan-major
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
        - schema:
            type: string
          in: query
          name: major_id
          required: true
          description: 추가하려는 major의 id
        - schema:
            type: string
          in: query
          name: plan_id
          description: major을 추가하려는 plan의 id
          required: true
    delete:
      summary: planmajor delete
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        major:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                              name:
                                type: string
                              type:
                                type: integer
        '400':
          description: |-
            1. body에 major_id가 없을 때
            2. body에 plan_id가 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: major_id missing
                example-2:
                  value:
                    error: plan_id missing
        '401':
          description: Unauthorized
        '404':
          description: body에 major_id와 plan_id가 있지만 해당하는 Major을 찾을 수 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: No major matching the given major_id and plan_id
      operationId: delete-plan-major
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
        - schema:
            type: string
          in: query
          name: major_id
          required: true
          description: 삭제하려는 major의 id
        - schema:
            type: string
          in: query
          name: plan_id
          required: true
          description: major을 삭제하려는 plan의 id
    get:
      summary: planmajor get
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  major:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        type:
                          type: integer
        '400':
          description: parameter의 plan_id에 해당하는 plan이 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                example-1:
                  value:
                    error: wrong plan_id
        '401':
          description: Unauthorized
      operationId: get-plan-major
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
        - schema:
            type: string
          in: query
          name: plan_id
          description: 조회하려는 plan
          required: true
components:
  schemas: {}
